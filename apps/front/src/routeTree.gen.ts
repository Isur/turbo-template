/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgetPasswordImport } from './routes/auth/forget-password'
import { Route as ProtectedTodosImport } from './routes/_protected/todos'
import { Route as ProtectedHealthImport } from './routes/_protected/health'
import { Route as ProtectedTodosIdImport } from './routes/_protected/todos.$id'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgetPasswordRoute = AuthForgetPasswordImport.update({
  path: '/forget-password',
  getParentRoute: () => AuthRoute,
} as any)

const ProtectedTodosRoute = ProtectedTodosImport.update({
  path: '/todos',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedHealthRoute = ProtectedHealthImport.update({
  path: '/health',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedTodosIdRoute = ProtectedTodosIdImport.update({
  path: '/$id',
  getParentRoute: () => ProtectedTodosRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected/health': {
      id: '/_protected/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof ProtectedHealthImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/todos': {
      id: '/_protected/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof ProtectedTodosImport
      parentRoute: typeof ProtectedImport
    }
    '/auth/forget-password': {
      id: '/auth/forget-password'
      path: '/forget-password'
      fullPath: '/auth/forget-password'
      preLoaderRoute: typeof AuthForgetPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_protected/todos/$id': {
      id: '/_protected/todos/$id'
      path: '/$id'
      fullPath: '/todos/$id'
      preLoaderRoute: typeof ProtectedTodosIdImport
      parentRoute: typeof ProtectedTodosImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  LayoutRoute: LayoutRoute.addChildren({ LayoutIndexRoute }),
  ProtectedRoute: ProtectedRoute.addChildren({
    ProtectedHealthRoute,
    ProtectedTodosRoute: ProtectedTodosRoute.addChildren({
      ProtectedTodosIdRoute,
    }),
  }),
  AuthRoute: AuthRoute.addChildren({
    AuthForgetPasswordRoute,
    AuthLoginRoute,
    AuthRegisterRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/_protected",
        "/auth"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/health",
        "/_protected/todos"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/forget-password",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/_protected/health": {
      "filePath": "_protected/health.tsx",
      "parent": "/_protected"
    },
    "/_protected/todos": {
      "filePath": "_protected/todos.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/todos/$id"
      ]
    },
    "/auth/forget-password": {
      "filePath": "auth/forget-password.tsx",
      "parent": "/auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx",
      "parent": "/auth"
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/_protected/todos/$id": {
      "filePath": "_protected/todos.$id.tsx",
      "parent": "/_protected/todos"
    }
  }
}
ROUTE_MANIFEST_END */
